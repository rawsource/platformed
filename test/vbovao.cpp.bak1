// global data map with string keys
// render map using 3 tile types
// implement fixed 60 fps update

#include <GL/glew.h>
#include <SDL2/SDL.h>
#include <SDL2/SDL_opengl.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

#include <string>
#include <fstream>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <map>
#include <vector>

#include <glm/vec2.hpp>

#include "json.hpp"
using json = nlohmann::json;


// ===========================================================================
// C O N S T A N T S =========================================================

const int TILE_SIZE = 48;

const int SCREEN_WIDTH = 1280;
const int SCREEN_HEIGHT = 720;

const int LEVEL_WIDTH = SCREEN_WIDTH * 2;
const int LEVEL_HEIGHT = SCREEN_HEIGHT + TILE_SIZE;


// ===========================================================================
// G L O B A L S =============================================================

// app
bool quit = false;

// SDL
SDL_Window* window = NULL;
SDL_GLContext context;

SDL_Rect camera = {0, 0, SCREEN_WIDTH, SCREEN_HEIGHT};

int shaderProgram;
unsigned int VBO, VAO;


// ===========================================================================
// S H A D E R S =============================================================

const char *vertexShaderSource = "#version 330 core\n"
	"layout (location = 0) in vec3 aPos;\n"
	"void main()\n"
	"{\n"
	"   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n"
	"}\0";
const char *fragmentShaderSource = "#version 330 core\n"
	"out vec4 FragColor;\n"
	"void main()\n"
	"{\n"
	"   FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n"
	"}\n\0";


// ===========================================================================
// C L A S S E S =============================================================

struct Vertex
{
	GLfloat x;
	GLfloat y;
};

struct Color
{
	GLfloat r;
	GLfloat g;
	GLfloat b;
};

struct Mesh
{
	std::vector<Vertex> vertices;
	std::vector<Color> colors;
	void render(float x, float y, float scale = 1.0f)
	{
		glPushMatrix();
		glTranslatef(x - camera.x, y - camera.y, 0.0f);
		glScalef(scale, scale, scale);
		glColorPointer(3, GL_FLOAT, 0, &colors[0]);
		glVertexPointer(2, GL_FLOAT, 0, &vertices[0]);
		glDrawArrays(GL_TRIANGLES, 0, vertices.size());
		glPopMatrix();
	}
};

// globals
std::map<std::string, Mesh> m;

class Level
{
	public:
		int mWidth = 32;
		int mHeight = 16;

		Level()
		{
			// load map
			json data;
			std::ifstream ifs;
			ifs.open("test/level.json");
			ifs >> data;
			ifs.close();

			int y = 0;
			for (auto& row : data)
			{
				int x = 0;
				for (auto& col : row)
				{
					int type = col;
					if (type == 0)
					{
						mTiles[y][x] = 0;
					}
					else
					{
						mTiles[y][x] = 1;
					}
					x++;
				}
				y++;
			}
		}

		bool inScreen(float xpos, float ypos)
		{
			if (xpos > SCREEN_WIDTH || ypos > SCREEN_HEIGHT) {
				return false;
			}
			return true;
		}

		void render()
		{
			for (int y = 0; y < mHeight; y++)
			{
				for (int x = 0; x < mWidth; x++)
				{
					float xpos = x * TILE_SIZE;
					float ypos = y * TILE_SIZE;

					if (mTiles[y][x] == 1)
					{
						if (inScreen(xpos, ypos))
						{
							m["tile-1"].render(xpos - camera.x, ypos - camera.y, 0.2f);
						}
					}
				}
			}

		}

	private:
		int mTiles[16][32];
};

// globals
Level l;


// ===========================================================================
// F U N C T I O N S =========================================================

void init()
{
    // build and compile our shader program
    // ------------------------------------
    // vertex shader
    int vertexShader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
    glCompileShader(vertexShader);
    // check for shader compile errors
    int success;
    char infoLog[512];
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    // fragment shader
    int fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
    glCompileShader(fragmentShader);
    // check for shader compile errors
    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    // link shaders
    shaderProgram = glCreateProgram();
    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);
    glLinkProgram(shaderProgram);
    // check for linking errors
    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
    if (!success) {
        glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
    }
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);



    // set up vertex data (and buffer(s)) and configure vertex attributes
    // ------------------------------------------------------------------
    // add a new set of vertices to form a second triangle (a total of 6 vertices); the vertex attribute configuration remains the same (still one 3-float position vector per vertex)
    float vertices[] = {
        // first triangle
        -0.9f, -0.5f, 0.0f,  // left 
        -0.0f, -0.5f, 0.0f,  // right
        -0.45f, 0.5f, 0.0f,  // top 
        // second triangle
         0.0f, -0.5f, 0.0f,  // left
         0.9f, -0.5f, 0.0f,  // right
         0.45f, 0.5f, 0.0f   // top 
    }; 

    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0); 

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0); 

}

void update()
{
}

void render()
{
        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);

        // draw our first triangle
        glUseProgram(shaderProgram);
        glBindVertexArray(VAO); // seeing as we only have a single VAO there's no need to bind it every time, but we'll do so to keep things a bit more organized
        glDrawArrays(GL_TRIANGLES, 0, 6); // set the count to 6 since we're drawing 6 vertices now (2 triangles); not 3!
        // glBindVertexArray(0); // no need to unbind it every time 

	// update screen
	SDL_GL_SwapWindow(window);
}

void close()
{
	glDeleteVertexArrays(1, &VAO);
	glDeleteBuffers(1, &VBO);

	SDL_DestroyWindow(window);
	window = NULL;

	// free memory

	SDL_Quit();
}

void initGL()
{
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(0.0f, SCREEN_WIDTH, SCREEN_HEIGHT, 0.0f, 0.0f, 1.0f);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
}

void initSDL()
{
	SDL_Init(SDL_INIT_EVERYTHING);

	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 3);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);

	window = SDL_CreateWindow("Platformed v0.1", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN);

	context = SDL_GL_CreateContext(window);

	SDL_GL_SetSwapInterval(1);

	glewExperimental = GL_TRUE;
    glewInit();
}

int main(int argc, char* args[])
{
	(void) argc;
	(void) args;

	initSDL();
	initGL();

	init();

	SDL_Event e;

	while (! quit)
	{
		while (SDL_PollEvent(&e) != 0)
		{
			// sdl events
			if (e.type == SDL_QUIT)
			{
				quit = true;
			}
		}

		update();
		render();
	}

	close();

	return 0;
}

